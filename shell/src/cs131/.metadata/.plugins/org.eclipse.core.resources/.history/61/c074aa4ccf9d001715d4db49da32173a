package cs131.pa1.filter.sequential;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import cs131.pa1.filter.Message;

public class Cat extends SequentialFilter {
	private String command;

	public Cat(String command) {
		this.command = command.trim();
	}
	
	public String getCommand() {
		return command;
	}
	
	@Override
	public void process() {
		if (input == null) {
			output = null;
			return;
		}
		String[] tokenized = command.split(" ");
		if (tokenized.length < 2) {
			System.out.print(Message.REQUIRES_PARAMETER.with_parameter(command));
			output = null;
			return;
		}
		
		Path path = null;
		for (int i = 1; i < tokenized.length; ++i) {
			path = Paths.get(SequentialREPL.currentWorkingDirectory + SequentialFilter.FILE_SEPARATOR + tokenized[1]);
			if (Files.notExists(path)) {
				System.out.print(Message.FILE_NOT_FOUND.with_parameter(command));
				output = null;
				return;
			}
	        try (Stream<String> lines = Files.lines(path)) {
	            lines.forEach(s -> processLine(s));
	        } catch (IOException ex) {}
		}
		
	}

	@Override
	protected String processLine(String line) {
		if (isDone()) {
			System.out.println(line);
		} else {
			output.add(line);
		}
		return null;
	}
	
	@Override
	public boolean isDone() {
		return next == null;
	}

}
